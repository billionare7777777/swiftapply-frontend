Here’s how to auto-fill a new browser using scraping:

Enter the First Name, Last Name, Email, Phone, and Location (City) fields exactly as they appear in the swiftApply.ai account you logged into. (first_name, last_name, email, phone_number, location_city).
The relevant data should be retrieved from the users table in the database. For Location (City), enter location_city in the input field and select the first option from the list of candidate options.
Use OpenAI to create a resume or cover letter that best matches the job description and your SwiftApply.ai account user information. Write the resume to be 3000-3500 characters long and the cover letter to be 1500-2000 characters long. Click the Enter Manually button in the Resume/CV and Cover Letter sections and enter them in the text area that appears.
For forms with candidate options, such as “School,” “Degree,” “Were you referred by an ATS employee?”, or “Have you applied to this position in the past 90 days?”, click the input field once and select the first option from the list of candidate options.
For forms that require text in the textarea, including "When did you first hear about DICE?", "What's the best live event you've been to? What made it so great?", and "What excites you about this role and working for DICE?", use OpenAI to answer questions about the job description in 1000-1500 characters and enter them in the textarea.

Solution:
```
1. Retrieve User Data From DB
Query your users table for:
first_name
last_name
email
phone_number
location_city
#2. Open the Application Page in a Browser (Selenium/Playwright)
#3. Auto-fill Simple Fields
Selectors:

First Name: input#first_name
Last Name: input#last_name
Email: input#email
Phone: input#phone
Location (City): input#candidate-location
Code Example (Selenium, Python):

driver.find_element(By.ID, 'first_name').send_keys(first_name)
driver.find_element(By.ID, 'last_name').send_keys(last_name)
driver.find_element(By.ID, 'email').send_keys(email)
driver.find_element(By.ID, 'phone').send_keys(phone_number)
#4. Auto-fill Location (City)
Enter location_city in input#candidate-location
Wait for dropdown to appear, then select the first option.
Selenium Example:

city_input = driver.find_element(By.ID, 'candidate-location')
city_input.send_keys(location_city)
time.sleep(1)  # wait for options to load
city_input.send_keys(Keys.ARROW_DOWN)
city_input.send_keys(Keys.ENTER)
#5. Generate Resume and Cover Letter with OpenAI
Use OpenAI API with a prompt:
Input: job_description + user info
Output: Resume (3000-3500 chars), Cover letter (1500-2000 chars)
Click “Enter Manually” button for Resume/CV: button[data-testid="resume-text"]
Fill: input#resume_text
Repeat for Cover Letter: button[data-testid="cover_letter-text"] and input#cover_letter_text
#6. Auto-select Candidate Options
For dropdowns like:

“School”
“Degree”
“Were you referred by an ATS employee?”
“Have you applied to this position in the past 90 days?”
“Veteran Status”
“Disability Status”
Procedure:

Find the input by label (see previous message for robust selectors)
Click the input
Wait for dropdown
Select the first option (usually with ARROW_DOWN + ENTER or click)
Selenium Example:

input_elem = get_input_by_label(driver, "School")
input_elem.click()
time.sleep(1)
input_elem.send_keys(Keys.ARROW_DOWN)
input_elem.send_keys(Keys.ENTER)
# Repeat for other fields
#7. Answer Custom Textareas with OpenAI
For each question like:

“When did you first hear about DICE?”
“What’s the best live event you’ve been to? …”
“What excites you about this role and working for DICE?”
If textarea is present:

Use OpenAI to generate a 1000-1500 char answer based on job description.
Fill the textarea.
#8. Summary Table
| Field | Selector/example | Action |
|----------------------------------|-------------------------------------------------------------|

Pro Tips:

Always find form fields by visible label, not by id (for robustness).
For dropdowns, click input, send ARROW_DOWN, then ENTER.
For OpenAI prompts, include user info and job description for best results.
Use explicit waits where possible instead of sleep.
```